{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\psing\\\\OneDrive\\\\Desktop\\\\ZenTalk\\\\client\\\\src\\\\Home\\\\Chat window\\\\Chatarea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chatarea.css\";\nimport socket from \"../../socket\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane, faSmile, faVideo } from \"@fortawesome/free-solid-svg-icons\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\nimport Videocall from \"./Videocall\";\n\nconst Chatarea = props => {\n  _s();\n\n  let selectedUser = props.selectedUser;\n  let ref = {\n    target: {\n      value: \" \"\n    }\n  }; //Ref to input tag to disable default behavior\n\n  const [messages, setMessages] = useState([]);\n  const [showEmojiPicker, setEmojiPickerShowStatus] = useState(false);\n  const [messageContentState, setMessageContent] = useState(\"\");\n  const [showVideoCall, setShowVideoCall] = useState(false);\n\n  const getContent = e => {\n    ref = e;\n    console.log(ref);\n    setMessageContent(ref.target.value);\n  };\n\n  const getEmoji = e => {\n    console.log(\"Emoji event\", e.native);\n    setMessageContent(messageContentState => messageContentState + e.native);\n  };\n\n  const messageEl = useRef(null);\n\n  const toggleVideoCall = () => {\n    setShowVideoCall(!showVideoCall);\n  };\n\n  useEffect(() => {\n    const dbMsgArr = props.initialMsg;\n    const arrSize = dbMsgArr.length;\n    const myUserName = props.myDetails.result.email.split(\"@\")[0];\n\n    for (let i = 0; i < arrSize; i++) {\n      if (dbMsgArr[i].toUser === myUserName) {\n        dbMsgArr[i].fromSelf = false;\n      }\n    }\n\n    setMessages(props.initialMsg);\n  }, []);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", event => {\n        const {\n          currentTarget: target\n        } = event;\n        target.scroll({\n          top: target.scrollHeight,\n          behavior: \"smooth\"\n        });\n      });\n    }\n  }, [messages]);\n\n  const emojiToggle = () => {\n    setEmojiPickerShowStatus(!showEmojiPicker);\n  };\n\n  const onMessage = (e, content) => {\n    if (showEmojiPicker) setEmojiPickerShowStatus(false);\n    e.preventDefault();\n    if (messageContentState === \"\") return;\n    console.log(\"Message is\", content);\n    setMessageContent(\"\");\n\n    if (props.selectedUser) {\n      socket.emit(\"private message\", {\n        content,\n        to: props.selectedUser.userID\n      }); //Newly added\n\n      socket.emit(\"database-message\", {\n        toUser: props.selectedUser.username,\n        content,\n        fromSelf: true,\n        fromUser: props.myDetails.result.email.split(\"@\")[0]\n      });\n      setMessages(messages => [...messages, {\n        toUser: props.selectedUser.username,\n        content,\n        fromSelf: true,\n        fromUser: props.myDetails.result.email.split(\"@\")[0]\n      }]);\n    }\n  };\n\n  const showMessages = messages.map((message, index) => {\n    if (message.fromSelf === true && message.toUser === props.selectedUser.username) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${showVideoCall ? \"message-ribbon-sent-small\" : \"message-ribbon-sent\"}`,\n      children: message.content\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this);\n    if (message.fromSelf === false && message.fromUser === props.selectedUser.username) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${showVideoCall ? \"message-ribbon-received-small\" : \"message-ribbon-received\"}`,\n      children: message.content\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this);\n  });\n  socket.on(\"private message\", ({\n    content,\n    from\n  }) => {\n    console.log(\"Received message yey\", content, \"from\", from);\n    console.log(\"Chat area\", props.connectedUsers);\n    let newMessages = {};\n\n    for (let i = 0; i < props.connectedUsers.length; i++) {\n      const user = props.connectedUsers[i];\n      console.log(\"Iteration:\", i);\n      console.log(\"Zero user\", user[0]);\n\n      if (user.userID === from) {\n        console.log(\"Iteration:\", i);\n        newMessages = {\n          fromUser: props.connectedUsers[i].username,\n          content,\n          fromSelf: false,\n          toUser: props.myDetails.result.email.split(\"@\")[0]\n        };\n        const messagesList = [...messages, newMessages];\n        setMessages(messagesList); // console.log(\"I am printing the messages\", messages);\n      }\n    }\n  });\n\n  const checkVideoCallStatus = val => {\n    console.log(\"In call status\");\n\n    if (!val) {\n      setShowVideoCall(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-area-master\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header-dp-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedUser.dpUrl,\n          alt: \"userdp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header-user-container\",\n        children: selectedUser.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-cam-icon-container\",\n        onClick: toggleVideoCall,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faVideo,\n          className: \"video-cam-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-area\",\n      ref: messageEl,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${showVideoCall ? \"temp-msg-container-small\" : \"temp-msg-container\"}`,\n        children: [showMessages, showEmojiPicker && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"emoji-picker-span\",\n          children: /*#__PURE__*/_jsxDEV(Picker, {\n            onSelect: getEmoji\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-call\",\n        children: showVideoCall && /*#__PURE__*/_jsxDEV(Videocall, {\n          currentUser: props.selectedUser,\n          myInfo: props.myDetails,\n          showCallStatus: checkVideoCallStatus,\n          isVisible: showVideoCall\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send-message-area\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => onMessage(e, messageContentState),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chat-text-area\",\n          placeholder: \"Enter message to send\",\n          onChange: e => getContent(e),\n          value: messageContentState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"emoji-icon-container\",\n          onClick: emojiToggle,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faSmile,\n            className: \"emoji-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-message-button\",\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPaperPlane,\n            className: \"send-message-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chatarea, \"bW8M/Z7dn4VxKjU1POR/Um83QGo=\");\n\n_c = Chatarea;\nexport default Chatarea;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatarea\");","map":{"version":3,"sources":["C:/Users/psing/OneDrive/Desktop/ZenTalk/client/src/Home/Chat window/Chatarea.js"],"names":["React","useState","useEffect","useRef","socket","FontAwesomeIcon","faPaperPlane","faSmile","faVideo","Picker","Videocall","Chatarea","props","selectedUser","ref","target","value","messages","setMessages","showEmojiPicker","setEmojiPickerShowStatus","messageContentState","setMessageContent","showVideoCall","setShowVideoCall","getContent","e","console","log","getEmoji","native","messageEl","toggleVideoCall","dbMsgArr","initialMsg","arrSize","length","myUserName","myDetails","result","email","split","i","toUser","fromSelf","current","addEventListener","event","currentTarget","scroll","top","scrollHeight","behavior","emojiToggle","onMessage","content","preventDefault","emit","to","userID","username","fromUser","showMessages","map","message","index","on","from","connectedUsers","newMessages","user","messagesList","checkVideoCallStatus","val","dpUrl","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Chatarea.css\";\r\nimport socket from \"../../socket\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPaperPlane,\r\n  faSmile,\r\n  faVideo,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport Videocall from \"./Videocall\";\r\n\r\nconst Chatarea = (props) => {\r\n  let selectedUser = props.selectedUser;\r\n  let ref = { target: { value: \" \" } }; //Ref to input tag to disable default behavior\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [showEmojiPicker, setEmojiPickerShowStatus] = useState(false);\r\n  const [messageContentState, setMessageContent] = useState(\"\");\r\n  const [showVideoCall, setShowVideoCall] = useState(false);\r\n  const getContent = (e) => {\r\n    ref = e;\r\n    console.log(ref);\r\n    setMessageContent(ref.target.value);\r\n  };\r\n\r\n  const getEmoji = (e) => {\r\n    console.log(\"Emoji event\", e.native);\r\n    setMessageContent((messageContentState) => messageContentState + e.native);\r\n  };\r\n\r\n  const messageEl = useRef(null);\r\n\r\n  const toggleVideoCall = () => {\r\n    setShowVideoCall(!showVideoCall);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const dbMsgArr = props.initialMsg;\r\n    const arrSize = dbMsgArr.length;\r\n    const myUserName = props.myDetails.result.email.split(\"@\")[0];\r\n    for (let i = 0; i < arrSize; i++) {\r\n      if (dbMsgArr[i].toUser === myUserName) {\r\n        dbMsgArr[i].fromSelf = false;\r\n      }\r\n    }\r\n    setMessages(props.initialMsg);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (messageEl) {\r\n      messageEl.current.addEventListener(\"DOMNodeInserted\", (event) => {\r\n        const { currentTarget: target } = event;\r\n        target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\r\n      });\r\n    }\r\n  }, [messages]);\r\n\r\n  const emojiToggle = () => {\r\n    setEmojiPickerShowStatus(!showEmojiPicker);\r\n  };\r\n\r\n  const onMessage = (e, content) => {\r\n    if (showEmojiPicker) setEmojiPickerShowStatus(false);\r\n    e.preventDefault();\r\n    if (messageContentState === \"\") return;\r\n    console.log(\"Message is\", content);\r\n    setMessageContent(\"\");\r\n    if (props.selectedUser) {\r\n      socket.emit(\"private message\", {\r\n        content,\r\n        to: props.selectedUser.userID,\r\n      });\r\n      //Newly added\r\n      socket.emit(\"database-message\", {\r\n        toUser: props.selectedUser.username,\r\n        content,\r\n        fromSelf: true,\r\n        fromUser: props.myDetails.result.email.split(\"@\")[0],\r\n      });\r\n      setMessages((messages) => [\r\n        ...messages,\r\n        {\r\n          toUser: props.selectedUser.username,\r\n          content,\r\n          fromSelf: true,\r\n          fromUser: props.myDetails.result.email.split(\"@\")[0],\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const showMessages = messages.map((message, index) => {\r\n    if (\r\n      message.fromSelf === true &&\r\n      message.toUser === props.selectedUser.username\r\n    )\r\n      return (\r\n        <div\r\n          key={index}\r\n          className={`${\r\n            showVideoCall ? \"message-ribbon-sent-small\" : \"message-ribbon-sent\"\r\n          }`}\r\n        >\r\n          {message.content}\r\n        </div>\r\n      );\r\n    if (\r\n      message.fromSelf === false &&\r\n      message.fromUser === props.selectedUser.username\r\n    )\r\n      return (\r\n        <div\r\n          key={index}\r\n          className={`${\r\n            showVideoCall\r\n              ? \"message-ribbon-received-small\"\r\n              : \"message-ribbon-received\"\r\n          }`}\r\n        >\r\n          {message.content}\r\n        </div>\r\n      );\r\n  });\r\n\r\n  socket.on(\"private message\", ({ content, from }) => {\r\n    console.log(\"Received message yey\", content, \"from\", from);\r\n    console.log(\"Chat area\", props.connectedUsers);\r\n    let newMessages = {};\r\n    for (let i = 0; i < props.connectedUsers.length; i++) {\r\n      const user = props.connectedUsers[i];\r\n      console.log(\"Iteration:\", i);\r\n      console.log(\"Zero user\", user[0]);\r\n      if (user.userID === from) {\r\n        console.log(\"Iteration:\", i);\r\n        newMessages = {\r\n          fromUser: props.connectedUsers[i].username,\r\n          content,\r\n          fromSelf: false,\r\n          toUser: props.myDetails.result.email.split(\"@\")[0],\r\n        };\r\n\r\n        const messagesList = [...messages, newMessages];\r\n        setMessages(messagesList);\r\n        // console.log(\"I am printing the messages\", messages);\r\n      }\r\n    }\r\n  });\r\n\r\n  const checkVideoCallStatus = (val) => {\r\n    console.log(\"In call status\");\r\n    if (!val) {\r\n      setShowVideoCall(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-area-master\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"chat-header-dp-container\">\r\n          <img src={selectedUser.dpUrl} alt=\"userdp\"></img>\r\n        </div>\r\n        <div className=\"chat-header-user-container\">{selectedUser.name}</div>\r\n        <div className=\"video-cam-icon-container\" onClick={toggleVideoCall}>\r\n          <FontAwesomeIcon icon={faVideo} className=\"video-cam-icon\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"message-area\" ref={messageEl}>\r\n        <div\r\n          className={`${\r\n            showVideoCall ? \"temp-msg-container-small\" : \"temp-msg-container\"\r\n          }`}\r\n        >\r\n          {showMessages}\r\n          {showEmojiPicker && (\r\n            <span className=\"emoji-picker-span\">\r\n              <Picker onSelect={getEmoji} />\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"video-call\">\r\n          {showVideoCall && (\r\n            <Videocall\r\n              currentUser={props.selectedUser}\r\n              myInfo={props.myDetails}\r\n              showCallStatus={checkVideoCallStatus}\r\n              isVisible={showVideoCall}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"send-message-area\">\r\n        <form onSubmit={(e) => onMessage(e, messageContentState)}>\r\n          <input\r\n            className=\"chat-text-area\"\r\n            placeholder=\"Enter message to send\"\r\n            onChange={(e) => getContent(e)}\r\n            value={messageContentState}\r\n          ></input>\r\n          <span className=\"emoji-icon-container\" onClick={emojiToggle}>\r\n            <FontAwesomeIcon icon={faSmile} className=\"emoji-icon\" />\r\n          </span>\r\n\r\n          <button type=\"submit\" className=\"send-message-button\">\r\n            <FontAwesomeIcon\r\n              icon={faPaperPlane}\r\n              className=\"send-message-icon\"\r\n            />\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatarea;\r\n"]},"metadata":{},"sourceType":"module"}